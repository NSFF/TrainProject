#lang r5rs

(#%require (only racket/base error thread when sleep car))
(#%require "Railway-adt.rkt")
(#%require "Gui-adt.rkt")

(#%provide nmbs-adt)

; =======================================
; __Description__:
; __Parameters__:
; __Ouput__: Nmbs object
; __Procedures__:
; __Comment__:
; =======================================

(define (nmbs-adt)
  (let ((current-thread #f)
        (running? #f)
        (loop-wait 0.1)
        (WINDOW 'default)
        (infrabel 'default))
    
    (define (start infrabel-adt)
      (set! infrabel infrabel-adt)
      (define gui (gui-adt "Nmbs-train-simulation" 1000 700))
      (set! WINDOW gui)
      ((gui 'initialize-window) (infrabel 'railway)
                                (infrabel 'train-lst)
                                (infrabel 'get-loco-detection-block))
      (set! running? #t)
      (set! current-thread (thread main-loop)))

    (define (stop)
      (set! running? #f))

    (define (main-loop)
      (when running?
        (cond ((WINDOW 'add-train?)
               ((infrabel 'add-train!) (string->number (WINDOW 'choice-previous))
                                      (string->number (WINDOW 'choice-current)))
               ((infrabel 'increase/decrease-speed!) (car (infrabel 'train-lst))
                                                     (WINDOW 'choice-speed))
               (WINDOW 'add-train-false!)))
        ((WINDOW 'update) (infrabel 'railway)
                          (infrabel 'train-lst)
                          (infrabel 'get-loco-detection-block))
        (sleep loop-wait)
        (main-loop)))
    
    (define (dispatch msg)
      (cond ((eq? msg 'new) dispatch)
            ((eq? msg 'start) start)
            ((eq? msg 'stop) (stop))
            (else (error ": not supported: " msg))))
    dispatch))